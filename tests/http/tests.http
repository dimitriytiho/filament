### Successful test: check response status is 200
GET https://examples.http-client.intellij.net/status/200

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Failed test: check response status is 200
GET https://examples.http-client.intellij.net/status/404

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Check response status and content-type
GET https://examples.http-client.intellij.net/get

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        const type = response.contentType.mimeType;
        client.assert(type === "application/json", `Expected 'application/json' but received '${type}'`);
    });
%}

### Check response body
GET https://examples.http-client.intellij.net/get

> {%
    client.test("Headers option exists", function () {
        client.assert(response.body.hasOwnProperty("headers"), "Cannot find 'headers' option in response");
    });
%}

### Check Content-Type from headers
GET https://examples.http-client.intellij.net/get

> {%
    client.test("Content-Type is application/json", () => {
        const contentType = response.headers.valueOf("content-type");
        client.assert(contentType == "application/json",
            `Expected Content-Type is application/json, but actual is ${contentType}`)
    })
%}

### Constructing Hash from request body with crypto
< {%
    const hash = crypto.sha256()
        .updateWithText(request.body.tryGetSubstituted())
        .digest().toHex();
    request.variables.set("hash", hash)
%}
POST https://examples.http-client.intellij.net/post
X-My-Hash: {{hash}}
Content-Type: application/json

{
  "prop": "value"
}

### Constructing HMAC from request body with crypto
< {%
    const signature = crypto.hmac.sha256()
        .withTextSecret(request.environment.get("secret")) // get variable from http-client.private.env.json
        .updateWithText(request.body.tryGetSubstituted())
        .digest().toHex();
    request.variables.set("signature", signature)
%}
POST https://examples.http-client.intellij.net/post
X-My-Signature: {{signature}}
Content-Type: application/json

{
  "prop": "value"
}

### Composing scripts with imports
< {%
    // common script parts can be moved to separate files and imported with 'import' keyword
    import {makeSignature} from "./my-utils";

    request.variables.set("signature", makeSignature())
%}
POST https://examples.http-client.intellij.net/post
X-My-Signature: {{signature}}
Content-Type: application/json

{
  "prop": "value"
}

> {%
    import {findSignature} from "./my-utils";

    client.test("Response has signature", () => {
        client.assert(findSignature(response.body) != undefined)
    })
%}

### Tip: clear global variables before the request
< {%
    client.global.clearAll()
%}
POST https://examples.http-client.intellij.net/post
Content-Type: application/json

{
    "my-temp-variable": "{{my-temp-variable}}"
}

> {%
    client.global.set("my-temp-variable", "I will be deleted soon!")
%}
